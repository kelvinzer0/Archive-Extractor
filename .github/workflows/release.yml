name: Archive Extractor and Release

on:
  workflow_dispatch:
    inputs:
      download_url:
        description: 'Direct URL to download archive'
        required: true
        type: string
      release_tag:
        description: 'Release tag name'
        required: true
        default: 'v1.0.0'
        type: string
      release_name:
        description: 'Release name'
        required: false
        default: 'Extracted Files'
        type: string
      infected_action:
        description: 'Action for infected EXE files'
        required: false
        default: 'quarantine'
        type: choice
        options:
          - delete
          - quarantine
          - rename

jobs:
  extract-and-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install extraction and security tools
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip unrar p7zip-full gzip bzip2 xz-utils clamav clamav-daemon
          
      - name: Update ClamAV virus definitions
        run: |
          sudo systemctl stop clamav-freshclam || true
          sudo freshclam || true
          echo "ClamAV updated"

      - name: Download archive
        run: |
          echo "Downloading from: ${{ github.event.inputs.download_url }}"
          wget -O downloaded_archive "${{ github.event.inputs.download_url }}"
          
      - name: Detect archive type and extract
        run: |
          FILE_TYPE=$(file -b --mime-type downloaded_archive)
          FILE_EXT=$(file -b downloaded_archive)
          
          echo "File type detected: $FILE_TYPE"
          echo "File info: $FILE_EXT"
          
          mkdir -p extracted_files
          
          # Deteksi dan ekstrak berdasarkan tipe file
          if [[ $FILE_EXT == *"gzip"* ]]; then
            echo "Extracting .gz file..."
            gunzip -c downloaded_archive > extracted_files/extracted_file || \
            tar -xzf downloaded_archive -C extracted_files
            
          elif [[ $FILE_EXT == *"bzip2"* ]]; then
            echo "Extracting .bz2 file..."
            bunzip2 -c downloaded_archive > extracted_files/extracted_file || \
            tar -xjf downloaded_archive -C extracted_files
            
          elif [[ $FILE_EXT == *"XZ"* ]]; then
            echo "Extracting .xz file..."
            xz -dc downloaded_archive > extracted_files/extracted_file || \
            tar -xJf downloaded_archive -C extracted_files
            
          elif [[ $FILE_EXT == *"Zip"* ]]; then
            echo "Extracting .zip file..."
            unzip -q downloaded_archive -d extracted_files
            
          elif [[ $FILE_EXT == *"RAR"* ]]; then
            echo "Extracting .rar file..."
            unrar x downloaded_archive extracted_files/
            
          elif [[ $FILE_EXT == *"7-zip"* ]]; then
            echo "Extracting .7z file..."
            7z x downloaded_archive -oextracted_files
            
          elif [[ $FILE_EXT == *"tar"* ]]; then
            echo "Extracting .tar file..."
            tar -xf downloaded_archive -C extracted_files
            
          else
            echo "Unknown archive format, trying multiple methods..."
            # Coba semua metode
            unzip -q downloaded_archive -d extracted_files 2>/dev/null || \
            tar -xzf downloaded_archive -C extracted_files 2>/dev/null || \
            tar -xjf downloaded_archive -C extracted_files 2>/dev/null || \
            tar -xf downloaded_archive -C extracted_files 2>/dev/null || \
            7z x downloaded_archive -oextracted_files 2>/dev/null || \
            echo "Failed to extract with all methods"
          fi
          
          echo "Extraction completed!"
          ls -lah extracted_files/

      - name: Remove virus .url files
        run: |
          echo "Removing .url files (potential malware)..."
          find extracted_files -type f -name "*.url" -delete
          echo "Removed .url files"
          
      - name: Scan and handle EXE files
        run: |
          echo "Scanning for EXE files..."
          
          # Buat direktori untuk laporan dan quarantine
          mkdir -p scan_reports
          mkdir -p quarantine_zone
          
          # Temukan semua file EXE
          find extracted_files -type f -iname "*.exe" > exe_list.txt
          EXE_COUNT=$(wc -l < exe_list.txt)
          
          echo "Found $EXE_COUNT EXE files"
          
          if [ $EXE_COUNT -gt 0 ]; then
            echo "## EXE Files Detection Report" > scan_reports/exe_report.md
            echo "" >> scan_reports/exe_report.md
            echo "Total EXE files found: $EXE_COUNT" >> scan_reports/exe_report.md
            echo "" >> scan_reports/exe_report.md
            
            # Scan dengan ClamAV
            echo "### Virus Scan Results (ClamAV)" >> scan_reports/exe_report.md
            echo "" >> scan_reports/exe_report.md
            
            INFECTED=0
            CLEAN=0
            
            while IFS= read -r exe_file; do
              if [ -f "$exe_file" ]; then
                echo "Scanning: $exe_file"
                
                # Get file info
                FILE_SIZE=$(stat -f%z "$exe_file" 2>/dev/null || stat -c%s "$exe_file" 2>/dev/null)
                FILE_HASH=$(sha256sum "$exe_file" | cut -d' ' -f1)
                RELATIVE_PATH="${exe_file#extracted_files/}"
                
                # Scan dengan ClamAV
                SCAN_RESULT=$(clamscan --no-summary "$exe_file" 2>&1)
                
                if echo "$SCAN_RESULT" | grep -q "FOUND"; then
                  VIRUS_NAME=$(echo "$SCAN_RESULT" | grep "FOUND" | sed 's/.*: \(.*\) FOUND/\1/')
                  
                  echo "⚠️ **INFECTED**: \`$RELATIVE_PATH\`" >> scan_reports/exe_report.md
                  echo "  - Size: $FILE_SIZE bytes" >> scan_reports/exe_report.md
                  echo "  - SHA256: \`$FILE_HASH\`" >> scan_reports/exe_report.md
                  echo "  - Detection: **$VIRUS_NAME**" >> scan_reports/exe_report.md
                  echo "" >> scan_reports/exe_report.md
                  INFECTED=$((INFECTED + 1))
                  
                  # OPSI: Pilih action untuk infected files
                  ACTION="${{ github.event.inputs.infected_action }}"
                  
                  if [ "$ACTION" == "delete" ]; then
                    # Hapus file yang terinfeksi
                    rm -f "$exe_file"
                    echo "  - ✅ Action: **DELETED**" >> scan_reports/exe_report.md
                  elif [ "$ACTION" == "quarantine" ]; then
                    # Pindah ke quarantine dengan password-protected zip
                    QUARANTINE_DIR="quarantine_zone/$(dirname "$RELATIVE_PATH")"
                    mkdir -p "$QUARANTINE_DIR"
                    
                    # Zip dengan password "infected" 
                    zip -P infected -j "$QUARANTINE_DIR/$(basename "$exe_file").quarantine.zip" "$exe_file" > /dev/null 2>&1
                    rm -f "$exe_file"
                    
                    echo "  - 🔒 Action: **QUARANTINED** (password: \`infected\`)" >> scan_reports/exe_report.md
                    echo "  - Location: \`quarantine_zone/$RELATIVE_PATH.quarantine.zip\`" >> scan_reports/exe_report.md
                  else
                    # Default: rename dengan .VIRUS extension
                    mv "$exe_file" "$exe_file.VIRUS"
                    echo "  - ⚠️ Action: **RENAMED** to \`.VIRUS\` extension" >> scan_reports/exe_report.md
                  fi
                  
                  echo "" >> scan_reports/exe_report.md
                else
                  echo "✅ **CLEAN**: \`$RELATIVE_PATH\`" >> scan_reports/exe_report.md
                  echo "  - Size: $FILE_SIZE bytes" >> scan_reports/exe_report.md
                  echo "  - SHA256: \`$FILE_HASH\`" >> scan_reports/exe_report.md
                  echo "" >> scan_reports/exe_report.md
                  CLEAN=$((CLEAN + 1))
                fi
              fi
            done < exe_list.txt
            
            echo "" >> scan_reports/exe_report.md
            echo "### Summary" >> scan_reports/exe_report.md
            echo "- 🦠 Infected files: $INFECTED" >> scan_reports/exe_report.md
            echo "- ✅ Clean files: $CLEAN" >> scan_reports/exe_report.md
            echo "- 📊 Total scanned: $EXE_COUNT" >> scan_reports/exe_report.md
            
            # Tambahkan peringatan
            echo "" >> scan_reports/exe_report.md
            echo "### ⚠️ CRITICAL SECURITY WARNING" >> scan_reports/exe_report.md
            echo "" >> scan_reports/exe_report.md
            echo "**DO NOT run any infected files, even from quarantine!**" >> scan_reports/exe_report.md
            echo "" >> scan_reports/exe_report.md
            echo "Infected files are dangerous and should only be:" >> scan_reports/exe_report.md
            echo "- Analyzed by security professionals in isolated environments" >> scan_reports/exe_report.md
            echo "- Used for malware research purposes only" >> scan_reports/exe_report.md
            echo "- Handled with proper sandboxing (VM, isolated network)" >> scan_reports/exe_report.md
            echo "" >> scan_reports/exe_report.md
            echo "**Files marked as CLEAN may still be:**" >> scan_reports/exe_report.md
            echo "- Potentially Unwanted Programs (PUPs)" >> scan_reports/exe_report.md
            echo "- Zero-day malware not in virus database" >> scan_reports/exe_report.md
            echo "- Packed/obfuscated malware" >> scan_reports/exe_report.md
            echo "" >> scan_reports/exe_report.md
            echo "**Recommended next steps:**" >> scan_reports/exe_report.md
            echo "1. Upload SHA256 hashes to VirusTotal for multi-engine scan" >> scan_reports/exe_report.md
            echo "2. Run files in sandbox environment (Any.run, Joe Sandbox)" >> scan_reports/exe_report.md
            echo "3. Never run on production systems" >> scan_reports/exe_report.md
            
            # Tambahkan guide untuk sandboxing
            echo "" >> scan_reports/exe_report.md
            echo "### 🔬 Safe Analysis Options" >> scan_reports/exe_report.md
            echo "" >> scan_reports/exe_report.md
            echo "If you need to analyze these files:" >> scan_reports/exe_report.md
            echo "" >> scan_reports/exe_report.md
            echo "**Free Online Sandboxes:**" >> scan_reports/exe_report.md
            echo "- [Any.run](https://any.run) - Interactive malware analysis" >> scan_reports/exe_report.md
            echo "- [Hybrid Analysis](https://hybrid-analysis.com) - Free automated analysis" >> scan_reports/exe_report.md
            echo "- [Joe Sandbox](https://www.joesandbox.com) - Deep malware analysis" >> scan_reports/exe_report.md
            echo "" >> scan_reports/exe_report.md
            echo "**Multi-Engine Scanning:**" >> scan_reports/exe_report.md
            echo "- [VirusTotal](https://virustotal.com) - 70+ antivirus engines" >> scan_reports/exe_report.md
            echo "- [MetaDefender](https://metadefender.opswat.com) - Multi-scanning platform" >> scan_reports/exe_report.md
            
            # Simpan hash untuk VirusTotal check
            echo "" >> scan_reports/exe_report.md
            echo "### 🔐 SHA256 Hashes for Verification" >> scan_reports/exe_report.md
            echo "" >> scan_reports/exe_report.md
            echo "Copy these hashes to VirusTotal for multi-engine scanning:" >> scan_reports/exe_report.md
            echo "" >> scan_reports/exe_report.md
            echo "\`\`\`" >> scan_reports/exe_report.md
            find extracted_files -type f -iname "*.exe" -exec sha256sum {} \; 2>/dev/null | sed 's|extracted_files/||' >> scan_reports/exe_report.md || true
            echo "\`\`\`" >> scan_reports/exe_report.md
            
            # Tampilkan report
            cat scan_reports/exe_report.md
            
            # Buat warning file
            echo "⚠️ SECURITY WARNING ⚠️" > extracted_files/SECURITY_WARNING.txt
            echo "" >> extracted_files/SECURITY_WARNING.txt
            echo "This archive contained $EXE_COUNT executable (.exe) files" >> extracted_files/SECURITY_WARNING.txt
            echo "" >> extracted_files/SECURITY_WARNING.txt
            echo "Scan Results:" >> extracted_files/SECURITY_WARNING.txt
            echo "- Infected/Malicious: $INFECTED" >> extracted_files/SECURITY_WARNING.txt
            echo "- Clean (verified): $CLEAN" >> extracted_files/SECURITY_WARNING.txt
            echo "" >> extracted_files/SECURITY_WARNING.txt
            echo "CRITICAL: Do NOT run any .exe files without proper verification!" >> extracted_files/SECURITY_WARNING.txt
            echo "" >> extracted_files/SECURITY_WARNING.txt
            echo "Infected files were: $ACTION" >> extracted_files/SECURITY_WARNING.txt
            echo "" >> extracted_files/SECURITY_WARNING.txt
            echo "For detailed scan report, see: scan_reports/exe_report.md" >> extracted_files/SECURITY_WARNING.txt
            echo "" >> extracted_files/SECURITY_WARNING.txt
            echo "Safe analysis options:" >> extracted_files/SECURITY_WARNING.txt
            echo "1. Upload to VirusTotal.com for multi-engine scan" >> extracted_files/SECURITY_WARNING.txt
            echo "2. Use online sandboxes (Any.run, Hybrid Analysis)" >> extracted_files/SECURITY_WARNING.txt
            echo "3. Run in isolated VM with network monitoring" >> extracted_files/SECURITY_WARNING.txt
          else
            echo "✅ No EXE files found - Archive is clean from executables"
          fi
          
      - name: Reverse rename all folders
        run: |
          echo "Reversing folder names..."
          # Script Python untuk reverse nama folder
          cat > reverse_folders.py << 'EOF'
          import os
          import sys
          
          def reverse_string(s):
              return s[::-1]
          
          def rename_folders_recursive(root_path):
              renamed_count = 0
              # Kumpulkan semua folder terlebih dahulu (dari yang terdalam)
              all_dirs = []
              for dirpath, dirnames, filenames in os.walk(root_path, topdown=False):
                  for dirname in dirnames:
                      full_path = os.path.join(dirpath, dirname)
                      all_dirs.append(full_path)
              
              # Rename dari yang terdalam dulu
              for old_path in all_dirs:
                  parent_dir = os.path.dirname(old_path)
                  old_name = os.path.basename(old_path)
                  new_name = reverse_string(old_name)
                  new_path = os.path.join(parent_dir, new_name)
                  
                  # Skip jika nama sama (palindrome)
                  if old_name != new_name:
                      try:
                          # Jika target sudah ada, tambahkan suffix
                          counter = 1
                          temp_new_path = new_path
                          while os.path.exists(temp_new_path):
                              temp_new_path = f"{new_path}_{counter}"
                              counter += 1
                          
                          os.rename(old_path, temp_new_path)
                          print(f"Renamed: {old_name} -> {os.path.basename(temp_new_path)}")
                          renamed_count += 1
                      except Exception as e:
                          print(f"Error renaming {old_path}: {e}")
              
              return renamed_count
          
          if __name__ == "__main__":
              root = sys.argv[1] if len(sys.argv) > 1 else "."
              count = rename_folders_recursive(root)
              print(f"\nTotal folders renamed: {count}")
          EOF
          
          python3 reverse_folders.py extracted_files
          
      - name: Create archive of extracted files
        run: |
          cd extracted_files
          zip -r ../extracted-files.zip .
          tar -czf ../extracted-files.tar.gz .
          cd ..

      - name: Upload extracted files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: extracted-files
          path: extracted_files/
          retention-days: 30
          
      - name: Upload quarantine zone (if exists)
        uses: actions/upload-artifact@v4
        if: hashFiles('quarantine_zone/**') != ''
        with:
          name: quarantine-zone-DO-NOT-OPEN
          path: quarantine_zone/
          retention-days: 7
          
      - name: Upload security scan report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-report
          path: scan_reports/
          retention-days: 90

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          name: ${{ github.event.inputs.release_name }}
          body: |
            ## Extracted Files Release
            
            **Source URL:** ${{ github.event.inputs.download_url }}
            **Extracted on:** ${{ github.run_id }}
            
            Files have been extracted and packaged in multiple formats:
            - ZIP format
            - TAR.GZ format
            
            Download the assets below to get the extracted content.
          files: |
            extracted-files.zip
            extracted-files.tar.gz
            scan_reports/exe_report.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "## Extraction Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully extracted files from: ${{ github.event.inputs.download_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛡️ Security Actions:" >> $GITHUB_STEP_SUMMARY
          echo "- Removed all .url files (potential malware)" >> $GITHUB_STEP_SUMMARY
          echo "- Scanned all EXE files with ClamAV antivirus" >> $GITHUB_STEP_SUMMARY
          echo "- Removed infected EXE files automatically" >> $GITHUB_STEP_SUMMARY
          echo "- Reversed all folder names" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Tambahkan info EXE scan jika ada
          if [ -f scan_reports/exe_report.md ]; then
            echo "### 🦠 EXE Scan Results:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat scan_reports/exe_report.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### 📁 Files extracted:" >> $GITHUB_STEP_SUMMARY
          find extracted_files -type f | head -20 >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 Total files: $(find extracted_files -type f | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "📁 Total folders: $(find extracted_files -type d | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "💾 Total size: $(du -sh extracted_files | cut -f1)" >> $GITHUB_STEP_SUMMARY
